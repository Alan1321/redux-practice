{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createContextSlice, createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showcounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialState,\n  reducers: {\n    increment(state, action) {\n      state.counter += action.payload;\n    },\n\n    decrement(state) {\n      state.counter -= 1;\n    }\n\n  }\n});\nconst authState = {\n  isloggedin: false\n};\nconst authSlice = createSlice({\n  name: \"authentication\",\n  initialState: authState,\n  reducers: {\n    login(state, action) {\n      state.isloggedin = true;\n    },\n\n    logout(state, action) {\n      state.isloggedin = false;\n    }\n\n  }\n}); // const counterReducer = (state = initialState, action) => {\n//   const alldata = {\n//     counter: state.counter,\n//     showcounter: state.showcounter,\n//   };\n//   if (action.type === \"increment\") {\n//     alldata.counter += action.paylod;\n//     return alldata;\n//   } else if (action.type === \"decrement\") {\n//     alldata.counter -= 1;\n//     return alldata;\n//   }\n//   return state;\n// };\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"sources":["/home/asubedi/Desktop/reduxpractice/src/store/index.js"],"names":["createStore","createContextSlice","createSlice","configureStore","initialState","counter","showcounter","counterSlice","name","reducers","increment","state","action","payload","decrement","authState","isloggedin","authSlice","login","logout","store","reducer","auth","counterActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SACEC,kBADF,EAEEC,WAFF,EAGEC,cAHF,QAIO,kBAJP;AAMA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAArB;AAEA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAC/BM,EAAAA,IAAI,EAAE,SADyB;AAE/BJ,EAAAA,YAAY,EAAEA,YAFiB;AAG/BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACvBD,MAAAA,KAAK,CAACN,OAAN,IAAiBO,MAAM,CAACC,OAAxB;AACD,KAHO;;AAIRC,IAAAA,SAAS,CAACH,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACN,OAAN,IAAiB,CAAjB;AACD;;AANO;AAHqB,CAAD,CAAhC;AAaA,MAAMU,SAAS,GAAG;AAAEC,EAAAA,UAAU,EAAE;AAAd,CAAlB;AAEA,MAAMC,SAAS,GAAGf,WAAW,CAAC;AAC5BM,EAAAA,IAAI,EAAE,gBADsB;AAE5BJ,EAAAA,YAAY,EAAEW,SAFc;AAG5BN,EAAAA,QAAQ,EAAE;AACRS,IAAAA,KAAK,CAACP,KAAD,EAAQC,MAAR,EAAgB;AACnBD,MAAAA,KAAK,CAACK,UAAN,GAAmB,IAAnB;AACD,KAHO;;AAIRG,IAAAA,MAAM,CAACR,KAAD,EAAQC,MAAR,EAAgB;AACpBD,MAAAA,KAAK,CAACK,UAAN,GAAmB,KAAnB;AACD;;AANO;AAHkB,CAAD,CAA7B,C,CAYA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,MAAMI,KAAK,GAAGjB,cAAc,CAAC;AAC3BkB,EAAAA,OAAO,EAAE;AAAEhB,IAAAA,OAAO,EAAEE,YAAY,CAACc,OAAxB;AAAiCC,IAAAA,IAAI,EAAEL,SAAS,CAACI;AAAjD;AADkB,CAAD,CAA5B;AAIA,OAAO,MAAME,cAAc,GAAGhB,YAAY,CAACiB,OAApC;AACP,eAAeJ,KAAf","sourcesContent":["import { createStore } from \"redux\";\nimport {\n  createContextSlice,\n  createSlice,\n  configureStore,\n} from \"@reduxjs/toolkit\";\n\nconst initialState = { counter: 0, showcounter: true };\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialState,\n  reducers: {\n    increment(state, action) {\n      state.counter += action.payload;\n    },\n    decrement(state) {\n      state.counter -= 1;\n    },\n  },\n});\n\nconst authState = { isloggedin: false };\n\nconst authSlice = createSlice({\n  name: \"authentication\",\n  initialState: authState,\n  reducers: {\n    login(state, action) {\n      state.isloggedin = true;\n    },\n    logout(state, action) {\n      state.isloggedin = false;\n    },\n  },\n});\n// const counterReducer = (state = initialState, action) => {\n//   const alldata = {\n//     counter: state.counter,\n//     showcounter: state.showcounter,\n//   };\n\n//   if (action.type === \"increment\") {\n//     alldata.counter += action.paylod;\n//     return alldata;\n//   } else if (action.type === \"decrement\") {\n//     alldata.counter -= 1;\n//     return alldata;\n//   }\n\n//   return state;\n// };\n\nconst store = configureStore({\n  reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\n});\n\nexport const counterActions = counterSlice.actions;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}