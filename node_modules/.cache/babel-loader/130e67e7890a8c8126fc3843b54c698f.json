{"ast":null,"code":"import { createStore, configureStore } from \"redux\";\nimport { createContextSlice, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showcounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialState,\n  reducers: {\n    increment(state) {\n      state.counter += action.amount;\n    },\n\n    decrement(state) {\n      state.counter -= 1;\n    }\n\n  }\n});\n\nconst counterReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const alldata = {\n    counter: state.counter,\n    showcounter: state.showcounter\n  };\n\n  if (action.type === \"increment\") {\n    alldata.counter += action.amount;\n    return alldata;\n  } else if (action.type === \"decrement\") {\n    alldata.counter -= 1;\n    return alldata;\n  }\n\n  return state;\n};\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer\n  }\n});\nexport default store;","map":{"version":3,"sources":["/home/asubedi/Desktop/reduxpractice/src/store/index.js"],"names":["createStore","configureStore","createContextSlice","createSlice","initialState","counter","showcounter","counterSlice","name","reducers","increment","state","action","amount","decrement","counterReducer","alldata","type","store","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,OAA5C;AACA,SAASC,kBAAT,EAA6BC,WAA7B,QAAgD,kBAAhD;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAArB;AAEA,MAAMC,YAAY,GAAGJ,WAAW,CAAC;AAC/BK,EAAAA,IAAI,EAAE,SADyB;AAE/BJ,EAAAA,YAAY,EAAEA,YAFiB;AAG/BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACN,OAAN,IAAiBO,MAAM,CAACC,MAAxB;AACD,KAHO;;AAIRC,IAAAA,SAAS,CAACH,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACN,OAAN,IAAiB,CAAjB;AACD;;AANO;AAHqB,CAAD,CAAhC;;AAaA,MAAMU,cAAc,GAAG,YAAkC;AAAA,MAAjCJ,KAAiC,uEAAzBP,YAAyB;AAAA,MAAXQ,MAAW;AACvD,QAAMI,OAAO,GAAG;AACdX,IAAAA,OAAO,EAAEM,KAAK,CAACN,OADD;AAEdC,IAAAA,WAAW,EAAEK,KAAK,CAACL;AAFL,GAAhB;;AAKA,MAAIM,MAAM,CAACK,IAAP,KAAgB,WAApB,EAAiC;AAC/BD,IAAAA,OAAO,CAACX,OAAR,IAAmBO,MAAM,CAACC,MAA1B;AACA,WAAOG,OAAP;AACD,GAHD,MAGO,IAAIJ,MAAM,CAACK,IAAP,KAAgB,WAApB,EAAiC;AACtCD,IAAAA,OAAO,CAACX,OAAR,IAAmB,CAAnB;AACA,WAAOW,OAAP;AACD;;AAED,SAAOL,KAAP;AACD,CAfD;;AAiBA,MAAMO,KAAK,GAAGjB,cAAc,CAAC;AAC3BkB,EAAAA,OAAO,EAAE;AAAEd,IAAAA,OAAO,EAAEE,YAAY,CAACY;AAAxB;AADkB,CAAD,CAA5B;AAIA,eAAeD,KAAf","sourcesContent":["import { createStore, configureStore } from \"redux\";\nimport { createContextSlice, createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = { counter: 0, showcounter: true };\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialState,\n  reducers: {\n    increment(state) {\n      state.counter += action.amount;\n    },\n    decrement(state) {\n      state.counter -= 1;\n    },\n  },\n});\n\nconst counterReducer = (state = initialState, action) => {\n  const alldata = {\n    counter: state.counter,\n    showcounter: state.showcounter,\n  };\n\n  if (action.type === \"increment\") {\n    alldata.counter += action.amount;\n    return alldata;\n  } else if (action.type === \"decrement\") {\n    alldata.counter -= 1;\n    return alldata;\n  }\n\n  return state;\n};\n\nconst store = configureStore({\n  reducer: { counter: counterSlice.reducer },\n});\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}